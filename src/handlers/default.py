from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from src.gifts import parse_members
from src.database import Database
from config import ADMINS
from src.data.keyboards import get_mode_keyboard, get_level_keyboard


router = Router()
IS_ACTIVE = False


@router.message(CommandStart())
async def start_handler(message: Message):
    if not Database.admin_exists(message.from_user.id):
        return await message.answer('<b>‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>')
    
    await message.answer(
        text='<b>‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Ç—ã —Å–ø–∏—Å–∫–æ–º –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>'
    )


@router.message(Command("stop"))
async def stop_handler(message: Message):
    if not Database.admin_exists(message.from_user.id):
        return await message.answer('<b>‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>')
    if not Database.get_user_is_parser(message.from_user.id):
        return await message.answer('<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>')
    
    Database.update_user_is_parser(message.from_user.id, False)
    await message.answer('<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>')

@router.message(Command("settings"))
async def settings_handler(message: Message):
    if not Database.admin_exists(message.from_user.id):
        return await message.answer('<b>‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>')
    
    current_mode = Database.get_user_mode(message.from_user.id)
    current_level = Database.get_user_level(message.from_user.id)
    
    text = (
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {'–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π' if current_mode == 2 else '–û–±—ã—á–Ω—ã–π'}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å–∏–∏: {current_level}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mode - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
        "/level - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å–∏–∏"
    )
    
    await message.answer(text)


@router.message(Command("mode"))
async def mode_handler(message: Message):
    if not Database.admin_exists(message.from_user.id):
        return await message.answer('<b>‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>')
    
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n\n"
        "–û–±—ã—á–Ω—ã–π - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
        "–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π - –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤",
        reply_markup=get_mode_keyboard()
    )


@router.message(Command("level"))
async def level_handler(message: Message):
    if not Database.admin_exists(message.from_user.id):
        return await message.answer('<b>‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>')
    
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å–∏–∏:</b>\n\n"
        "–£—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤",
        reply_markup=get_level_keyboard()
    )


@router.callback_query(lambda c: c.data.startswith(("mode_", "level_")))
async def process_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not Database.admin_exists(user_id):
        return await callback.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    action, value = callback.data.split("_")
    value = int(value)
    
    if action == "mode":
        Database.update_user_mode(user_id, value)
        mode_text = "–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π" if value == 2 else "–û–±—ã—á–Ω—ã–π"
        await callback.message.edit_text(f"<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {mode_text} —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞</b>")
    else:
        Database.update_user_level(user_id, value)
        await callback.message.edit_text(f"<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {value} —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å–∏–∏</b>")
    
    await callback.answer()

@router.message(F.from_user.id.in_(ADMINS))
async def chats_handler(message: Message):
    if Database.get_user_is_parser(message.from_user.id):
        return await message.answer('<b>‚ùå –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>')
    
    Database.update_user_is_parser(message.from_user.id, True)

    chats = message.text.split('\n')
    for index, chat in enumerate(chats):
        chats[index] = chat.replace('https://', '').replace('t.me/', '').replace('@', '')

    result_message = await message.answer(f'<b>üìë –ù–∞—á–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ {len(chats)} —á–∞—Ç–æ–≤.</b>')

    for chat in chats:
        async for result_gift, user_id, username in parse_members(message.bot.user_session, message.from_user.id, chat):
            sorted_gifts = sorted(result_gift, key=lambda x: x["level"])
            
            result_text = f'<b>üåü –ß–∞—Ç: @{chat} | –Æ–∑–µ—Ä: @{username} [id: {user_id}]</b>\n'
            gifts_text = ""

            current_level = 0
            for item in sorted_gifts:
                if item["level"] != current_level:
                    current_level = item["level"]
                    gifts_text += f'\n<b>–£—Ä–æ–≤–µ–Ω—å {current_level}:</b>\n'

                gift_line = f'<b><i>‚Ä¢</i></b> Gift: {item["gift"]} - <b>{item["name"]}</b> (@{item["username"]})\n'
                
                if len(result_text + gifts_text + gift_line) <= 4096:
                    gifts_text += gift_line
                else:
                    break 
                    
            await result_message.reply(result_text + gifts_text)

    await result_message.reply('<b>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ–∫–æ–Ω—á–µ–Ω</b>')
    Database.update_user_is_parser(message.from_user.id, False)